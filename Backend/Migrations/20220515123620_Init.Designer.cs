// <auto-generated />
using System;
using Backend;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20220515123620_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Backend.Models.EventDB", b =>
                {
                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<string>("LocationID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<DateTime>("StartDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isFinished")
                        .HasColumnType("bit");

                    b.HasKey("EventId");

                    b.HasIndex("LocationID");

                    b.HasIndex("UserID");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = "1",
                            Description = "Lorema da dasda jdnasjndajnskdjknadjkn asjndakjn djanks djnasd jknanjdandnsajdjn",
                            EndDatetime = new DateTime(2022, 5, 15, 20, 36, 19, 599, DateTimeKind.Local).AddTicks(5876),
                            EventName = "Mafia game",
                            ImagePath = "/test",
                            IsCancelled = false,
                            LocationID = "1",
                            Rate = 4.5f,
                            StartDatetime = new DateTime(2022, 5, 15, 15, 36, 19, 597, DateTimeKind.Local).AddTicks(9134),
                            UserID = "b74ddd14-6340-4840-95c2-db12554843e5",
                            isFinished = false
                        },
                        new
                        {
                            EventId = "2",
                            Description = "Lorema da dasda jdnasjndajnskdjknadjkn asjndakjn djanks djnasd jknanjdandnsajdjn",
                            EndDatetime = new DateTime(2022, 5, 15, 20, 36, 19, 599, DateTimeKind.Local).AddTicks(7230),
                            EventName = "Mafia game1",
                            ImagePath = "/test",
                            IsCancelled = false,
                            LocationID = "1",
                            Rate = 4.5f,
                            StartDatetime = new DateTime(2022, 5, 15, 15, 36, 19, 599, DateTimeKind.Local).AddTicks(7218),
                            UserID = "b74ddd14-6340-4840-95c2-db12554843e5",
                            isFinished = false
                        },
                        new
                        {
                            EventId = "3",
                            Description = "Lorema da dasda jdnasjndajnskdjknadjkn asjndakjn djanks djnasd jknanjdandnsajdjn",
                            EndDatetime = new DateTime(2022, 5, 15, 20, 36, 19, 599, DateTimeKind.Local).AddTicks(7236),
                            EventName = "Mafia game2",
                            ImagePath = "/test",
                            IsCancelled = false,
                            LocationID = "1",
                            Rate = 4.5f,
                            StartDatetime = new DateTime(2022, 5, 15, 15, 36, 19, 599, DateTimeKind.Local).AddTicks(7234),
                            UserID = "b74ddd14-6340-4840-95c2-db12554843e5",
                            isFinished = false
                        },
                        new
                        {
                            EventId = "4",
                            Description = "Lorema da dasda jdnasjndajnskdjknadjkn asjndakjn djanks djnasd jknanjdandnsajdjn",
                            EndDatetime = new DateTime(2022, 5, 15, 20, 36, 19, 599, DateTimeKind.Local).AddTicks(7242),
                            EventName = "Mafia game3",
                            ImagePath = "/test",
                            IsCancelled = false,
                            LocationID = "1",
                            Rate = 4.5f,
                            StartDatetime = new DateTime(2022, 5, 15, 15, 36, 19, 599, DateTimeKind.Local).AddTicks(7240),
                            UserID = "b74ddd14-6340-4840-95c2-db12554843e5",
                            isFinished = false
                        },
                        new
                        {
                            EventId = "5",
                            Description = "Lorema da dasda jdnasjndajnskdjknadjkn asjndakjn djanks djnasd jknanjdandnsajdjn",
                            EndDatetime = new DateTime(2022, 5, 15, 20, 36, 19, 599, DateTimeKind.Local).AddTicks(7247),
                            EventName = "Mafia game4",
                            ImagePath = "/test",
                            IsCancelled = false,
                            LocationID = "1",
                            Rate = 4.5f,
                            StartDatetime = new DateTime(2022, 5, 15, 15, 36, 19, 599, DateTimeKind.Local).AddTicks(7245),
                            UserID = "b74ddd14-6340-4840-95c2-db12554843e5",
                            isFinished = false
                        },
                        new
                        {
                            EventId = "6",
                            Description = "Lorema da dasda jdnasjndajnskdjknadjkn asjndakjn djanks djnasd jknanjdandnsajdjn",
                            EndDatetime = new DateTime(2022, 5, 15, 20, 36, 19, 599, DateTimeKind.Local).AddTicks(7252),
                            EventName = "Mafia game5",
                            ImagePath = "/test",
                            IsCancelled = false,
                            LocationID = "1",
                            Rate = 4.5f,
                            StartDatetime = new DateTime(2022, 5, 15, 15, 36, 19, 599, DateTimeKind.Local).AddTicks(7250),
                            UserID = "b74ddd14-6340-4840-95c2-db12554843e5",
                            isFinished = false
                        });
                });

            modelBuilder.Entity("Backend.Models.LocationDB", b =>
                {
                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = "1",
                            Latitude = 48.733755000000002,
                            Longitude = 37.586129999999997
                        });
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "455c3107-32d5-45f9-8758-8fa1a352a657",
                            Email = "volkovskiy4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VOLKOVSKIY4@GMAIL.COM",
                            PasswordHash = "AJtQn7aPYwUBreGFV/umrnoWXMChjsvuhUqHRjG19r/ozEfFAYiBolSKk7fU9Rsvnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df8847a5-8842-48cd-8922-f14cb3195600",
                            TwoFactorEnabled = false,
                            UserName = "Test1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Backend.Models.EventDB", b =>
                {
                    b.HasOne("Backend.Models.LocationDB", "Location")
                        .WithMany("Events")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.LocationDB", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
